--=========================================================
--              TRIGGERS - EXERCICIOS
--                  19/02/2025
--=========================================================

CREATE TABLE TRIGGERS.MAQUINA (
ID_MAQUINA INT PRIMARY KEY NOT NULL,
TIPO VARCHAR(255),
VELOCIDADE INT,
HARDDISK INT,
PLACA_REDE INT,
MEMORIA_RAM INT,
FK_USUARIO INT,
FOREIGN KEY(FK_USUARIO) REFERENCES TRIGGERS.USUARIOS(ID_USUARIO)
);

CREATE TABLE TRIGGERS.USUARIOS (
ID_USUARIO INT PRIMARY KEY NOT NULL,
PASSWORD VARCHAR(255),
NOME_USUARIO VARCHAR(255),
RAMAL INT,
ESPECIALIDADE VARCHAR(255)
);

CREATE TABLE TRIGGERS.SOFTWARE (
ID_SOFTWARE INT PRIMARY KEY NOT NULL,
PRODUTO VARCHAR(255),
HARDDISK INT,
MEMORIA_RAM INT,
FK_MAQUINA INT,
FOREIGN KEY(FK_MAQUINA) REFERENCES TRIGGERS.MAQUINA(ID_MAQUINA)
);
--===========================================
-- INSERINDO OS DADOS
INSERT INTO TRIGGERS.MAQUINA VALUES (1, 'DESKTOP', 2, 500, 1, 4, 1);
INSERT INTO TRIGGERS.MAQUINA VALUES (2, 'NOTEBOOK', 1, 250, 1, 2, 2);
INSERT INTO TRIGGERS.MAQUINA VALUES (3, 'DESKTOP', 3, 1000, 1, 8, 3);
INSERT INTO TRIGGERS.MAQUINA VALUES (4, 'NOTEBOOK', 2, 500, 1, 4, 4);

INSERT INTO TRIGGERS.USUARIOS VALUES (1, '123', 'JOAO', 123, 'TI');
INSERT INTO TRIGGERS.USUARIOS VALUES (2, '456', 'MARIA', 456, 'RH');
INSERT INTO TRIGGERS.USUARIOS VALUES (3, '789', 'JOSE', 789, 'FINANCEIRO');
INSERT INTO TRIGGERS.USUARIOS VALUES (4, '101', 'ANA', 101, 'TI');

INSERT INTO TRIGGERS.SOFTWARE VALUES (1, 'WINDOWS', 100, 2, 1);
INSERT INTO TRIGGERS.SOFTWARE VALUES (2, 'LINUX', 50, 1, 2);
INSERT INTO TRIGGERS.SOFTWARE VALUES (3, 'WINDOWS', 200, 4, 3);
--===========================================
/*
1. Criar um Trigger para Auditoria de Exclusão de Máquinas: Criar um trigger que registre quando um registro da tabela Maquina for excluído.*/
CREATE TABLE TRIGGERS.LOG_EXCLUSAO_MAQUINA (
    ID_LOG SERIAL PRIMARY KEY,
    ID_MAQUINA INT,
    ACAO VARCHAR(50),
    DATA TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE OR REPLACE FUNCTION TRIGGERS.LOG_EXCLUSAO_MAQUINA()
RETURNS TRIGGER AS $$
BEGIN
    --OLD É PARA PEGAR O VALOR ANTIGO DA LINHA QUE FOI EXCLUÍDO
    INSERT INTO TRIGGERS.RLOG_EXCLUSAO_MAQUINA (ID_MAQUINA, ACAO)
    VALUES (OLD.ID_MAQUINA, 'EXCLUIU MAQUINA');
    RETURN OLD;
    END;
    -- OLD É PARA PEGAR O VALOR ANTIGO DA LINHA QUE FOI EXCLUÍDO
    -- NEW É PARA PEGAR O VALOR NOVO DA LINHA QUE FOI INSERIDA
    -- NULL NÃO É PARA FAZER NADA
$$ LANGUAGE plpgsql;

CREATE TRIGGER LOG_EXCLUSAO_MAQUINA
AFTER DELETE ON TRIGGERS.MAQUINA
FOR EACH ROW
EXECUTE PROCEDURE TRIGGERS.LOG_EXCLUSAO_MAQUINA();

/*2. Criar um Trigger para Evitar Senhas Fracas: Criar um BEFORE INSERT trigger para impedir que um usuário seja cadastrado com uma senha menor que 6 caracteres.*/
ALTER TABLE TRIGGERS.USUARIOS ADD SENHAS INT;
ALTER TABLE TRIGGERS.USUARIOS ALTER COLUMN SENHAS TYPE VARCHAR(6);
    
CREATE OR REPLACE FUNCTION TRIGGERS.AUDITORIA_SENHAS()
RETURNS TRIGGER AS $$
BEGIN
    IF LENGTH(NEW.SENHAS::VARCHAR) < 6 THEN
    RAISE EXCEPTION 'A senha deve ter pelo menos 6 caracteres';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER AUDITORIA_SENHAS
BEFORE INSERT ON TRIGGERS.USUARIOS
FOR EACH ROW
EXECUTE PROCEDURE TRIGGERS.AUDITORIA_SENHAS();

INSERT INTO TRIGGERS.USUARIOS VALUES (5, '102', 'AMANDA', 102, 'TI', 123445);

INSERT INTO TRIGGERS.USUARIOS VALUES (6, '103', 'LUIZ', 103, 'MARKETING', 123456);

/*3.Criar um Trigger para Atualizar Contagem de Softwares em Cada Máquina: Criar um AFTER INSERT trigger que atualiza uma tabela auxiliar 
Maquina_Software_Count que armazena a quantidade de softwares instalados em cada máquina.*/

/*4. Criar um Trigger para Evitar Remoção de Usuários do Setor de TI: 
Objetivo: Impedir a remoção de usuários cuja Especialidade seja 'TI'.*/
CREATE OR REPLACE FUNCTION TRIGGERS.AUDITORIA_TI()
RETURNS TRIGGER AS $$
BEGIN
    IF OLD.ESPECIALIDADE = 'TI' THEN
        RAISE EXCEPTION 'NÃO PODE EXCLUIR USUARIOS DO T.I';
    END IF;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER AUDITORIA_TI
BEFORE DELETE ON TRIGGERS.USUARIOS
FOR EACH ROW
EXECUTE PROCEDURE TRIGGERS.AUDITORIA_TI();

DELETE FROM TRIGGERS.USUARIOS WHERE ID_USUARIO = 5;
/*5. Criar um Trigger para Calcular o Uso Total de Memória por Máquina: 
Criar um AFTER INSERT e AFTER DELETE trigger que calcula a quantidade total de memória RAM ocupada pelos softwares em cada máquina.*/
CREATE OR REPLACE FUNCTION TRIGGERS.ATUALIZAR_MEMORIA_RAM()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE TRIGGERS.MAQUINA
    SET MEMORIA_RAM = (
        SELECT COALESCE(SUM(MEMORIA_RAM), 0)
        FROM TRIGGERS.SOFTWARE
        WHERE FK_MAQUINA = COALESCE(NEW.FK_MAQUINA, OLD.FK_MAQUINA)
    )
    WHERE ID_MAQUINA = COALESCE(NEW.FK_MAQUINA, OLD.FK_MAQUINA);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER ATUALIZAR_MEMORIA_RAM
AFTER INSERT OR DELETE ON TRIGGERS.SOFTWARE
FOR EACH ROW
EXECUTE FUNCTION TRIGGERS.ATUALIZAR_MEMORIA_RAM();

INSERT INTO TRIGGERS.SOFTWARE VALUES (6, 'WINDOWS', 100, 2, 1);
DELETE FROM TRIGGERS.SOFTWARE WHERE ID_SOFTWARE = 6;

/*6. Criar um Trigger para Registrar Alterações de Especialidade em Usuários: 
Criar um trigger que registre as mudanças de especialidade dos usuários na tabela Usuarios.*/
CREATE OR REPLACE FUNCTION TRIGGERS.MUDANCA_ESPECIALIDADE()
RETURNS TRIGGER AS $$
BEGIN
    RAISE NOTICE 'Usuário % teve a especialidade alterada de % para %',
        OLD.ID_USUARIO, OLD.ESPECIALIDADE, NEW.ESPECIALIDADE;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER MUDANCA_ESPECIALIDADE
AFTER UPDATE ON TRIGGERS.USUARIOS
FOR EACH ROW
WHEN (OLD.ESPECIALIDADE IS DISTINCT FROM NEW.ESPECIALIDADE)
EXECUTE FUNCTION TRIGGERS.MUDANCA_ESPECIALIDADE();

UPDATE TRIGGERS.USUARIOS 
SET ESPECIALIDADE = 'RH' 
WHERE ID_USUARIO = 1;


/*7. Criar um Trigger para Impedir Exclusão de Softwares Essenciais: 
Criar um BEFORE DELETE trigger que impeça a exclusão de softwares considerados essenciais (ex: Windows).
*/
CREATE OR REPLACE FUNCTION TRIGGERS.AUDITORIA_SOFTWARES()
RETURNS TRIGGER AS $$
BEGIN
    IF OLD.PRODUTO = 'WINDOWS' OR OLD.PRODUTO = 'LINUX' THEN
    RAISE EXCEPTION 'NÃO PODE EXCLUIR SOFTWARES ESSENCIAIS';
    END IF;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER AUDITORIA_SOFTWARES
BEFORE DELETE ON TRIGGERS.SOFTWARE
FOR EACH ROW
EXECUTE PROCEDURE TRIGGERS.AUDITORIA_SOFTWARES();

INSERT INTO TRIGGERS.SOFTWARE VALUES (4, 'PACOTE OFFICE', 200, 4, 3);
INSERT INTO TRIGGERS.SOFTWARE VALUES (5, 'PHOTOSHOP', 200, 4, 3);

DELETE FROM TRIGGERS.SOFTWARE WHERE ID_SOFTWARE = 4;
DELETE FROM TRIGGERS.SOFTWARE WHERE ID_SOFTWARE = 3;
