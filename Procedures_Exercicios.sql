--===========================================
--         PROCEDURES EXERCICIOS
--          17/02/2025
-===========================================

CREATE TABLE PROCEDURES.MAQUINA (
ID_MAQUINA INT PRIMARY KEY NOT NULL,
TIPO VARCHAR(255),
VELOCIDADE INT,
HARDDISK INT,
PLACA_REDE INT,
MEMORIA_RAM INT,
FK_USUARIO INT,
FOREIGN KEY(FK_USUARIO) REFERENCES PROCEDURES.USUARIOS(ID_USUARIO)
);

CREATE TABLE PROCEDURES.USUARIOS (
ID_USUARIO INT PRIMARY KEY NOT NULL,
PASSWORD VARCHAR(255),
NOME_USUARIO VARCHAR(255),
RAMAL INT,
ESPECIALIDADE VARCHAR(255)
);

CREATE TABLE PROCEDURES.SOFTWARE (
ID_SOFTWARE INT PRIMARY KEY NOT NULL,
PRODUTO VARCHAR(255),
HARDDISK INT,
MEMORIA_RAM INT,
FK_MAQUINA INT,
FOREIGN KEY(FK_MAQUINA) REFERENCES PROCEDURES.MAQUINA(ID_MAQUINA)
);
--===========================================
-- INSERINDO OS DADOS
INSERT INTO PROCEDURES.MAQUINA VALUES (1, 'DESKTOP', 2, 500, 1, 4, 1);
INSERT INTO PROCEDURES.MAQUINA VALUES (2, 'NOTEBOOK', 1, 250, 1, 2, 2);
INSERT INTO PROCEDURES.MAQUINA VALUES (3, 'DESKTOP', 3, 1000, 1, 8, 3);
INSERT INTO PROCEDURES.MAQUINA VALUES (4, 'NOTEBOOK', 2, 500, 1, 4, 4);

INSERT INTO PROCEDURES.MAQUINA VALUES (5, 'TABLETE', 2, 250, 1, 2, 4);


INSERT INTO PROCEDURES.USUARIOS VALUES (1, '123', 'JOAO', 123, 'TI');
INSERT INTO PROCEDURES.USUARIOS VALUES (2, '456', 'MARIA', 456, 'RH');
INSERT INTO PROCEDURES.USUARIOS VALUES (3, '789', 'JOSE', 789, 'FINANCEIRO');
INSERT INTO PROCEDURES.USUARIOS VALUES (4, '101', 'ANA', 101, 'TI');

INSERT INTO PROCEDURES.SOFTWARE VALUES (1, 'WINDOWS', 100, 2, 1);
INSERT INTO PROCEDURES.SOFTWARE VALUES (2, 'LINUX', 50, 1, 2);
INSERT INTO PROCEDURES.SOFTWARE VALUES (3, 'WINDOWS', 200, 4, 3);
INSERT INTO PROCEDURES.SOFTWARE VALUES (4, 'LINUX', 100, 2, 4);
--===========================================
-- EXERCICIOS

/*
1.Crie uma função chamada Espaco_Disponivel que recebe o ID da máquina 
e retorna TRUE se houver espaço suficiente para instalar um software.*/
CREATE OR REPLACE FUNCTION PROCEDURES.ESPACO_DISPONIVEL(ID_MAQ INT, TAMANHO_SOFTWARE INT) 
RETURNS BOOLEAN AS $$
DECLARE
    ESPACO_TOTAL INT;
    ESPACO_UTILIZADO INT;
BEGIN
    SELECT HARDDISK INTO ESPACO_TOTAL 
    FROM PROCEDURES.MAQUINA 
    WHERE ID_MAQUINA = ID_MAQ;

    SELECT SUM(HARDDISK) INTO ESPACO_UTILIZADO 
    FROM PROCEDURES.SOFTWARE 
    WHERE FK_MAQUINA = ID_MAQ;

    RETURN (ESPACO_TOTAL - ESPACO_UTILIZADO) >= TAMANHO_SOFTWARE;
END;
$$ LANGUAGE plpgsql;


SELECT PROCEDURES.ESPACO_DISPONIVEL(1, 100);


/*2.Crie uma procedure Instalar_Software que só instala um 
software se houver espaço disponível.*/
CREATE OR REPLACE PROCEDURE PROCEDURES.INSTALAR_SOFTWARE(
    ID_SOFT INTEGER,
    ID_MAQ INTEGER,
    HARDDISK_SOFT INTEGER,
    MEMORIA_RAM_SOFT INTEGER)
AS $$
DECLARE
    ESPACO_DISP INT;
    MEMORIA_DISP INT;
BEGIN
    -- Busca o espaço disponível na máquina
    SELECT HARDDISK, MEMORIA_RAM INTO ESPACO_DISP, MEMORIA_DISP
    FROM PROCEDURES.MAQUINA
    WHERE ID_MAQUINA = ID_MAQ;

    -- Verifica se há espaço suficiente
    IF ESPACO_DISP >= HARDDISK_SOFT AND MEMORIA_DISP >= MEMORIA_RAM_SOFT THEN
        -- Insere o software na tabela
        INSERT INTO PROCEDURES.SOFTWARE (ID_SOFTWARE, PRODUTO, HARDDISK, MEMORIA_RAM, FK_MAQUINA)
        VALUES (ID_SOFT, 'NEW_SOFTWARE', HARDDISK_SOFT, MEMORIA_RAM_SOFT, ID_MAQ);
    ELSE
        -- Levanta uma exceção se não houver espaço suficiente
        RAISE EXCEPTION 'Espaço insuficiente para instalar o software.';
    END IF;
END;
$$ LANGUAGE plpgsql;

CALL PROCEDURES.INSTALAR_SOFTWARE(6, 1, 50, 1);
CALL PROCEDURES.INSTALAR_SOFTWARE(7, 4, 100, 1);
CALL PROCEDURES.INSTALAR_SOFTWARE(8, 99, 900, 1);


/*3.Crie uma função chamada Maquinas_Do_Usuario que 
retorna uma lista de máquinas associadas a um usuário.*/
CREATE OR REPLACE FUNCTION PROCEDURES.MAQUINAS_DO_USUARIO(ID_USUARIO INT) RETURNS INT AS $$
DECLARE
    MAQ_USER INT;
BEGIN
    SELECT COUNT(ID_MAQUINA) INTO MAQ_USER
    FROM PROCEDURES.MAQUINA
    WHERE FK_USUARIO = ID_USUARIO;
    RETURN MAQ_USER;
END;
$$ LANGUAGE plpgsql;

SELECT PROCEDURES.MAQUINAS_DO_USUARIO(1);
SELECT PROCEDURES.MAQUINAS_DO_USUARIO(4);

/*4.Crie uma procedure Atualizar_Recursos_Maquina que 
aumenta a memória RAM e o espaço em disco de uma máquina específica.*/
CREATE PROCEDURE PROCEDURES.ATUALIZAR_RECURSOS_MAQUINA(
    ID_MAQ INT,
    NOVA_RAM INT,
    NOVO_HD INT)
AS $$
DECLARE
    RAM_ATUAL INT;
    HD_ATUAL INT;
BEGIN 
    UPDATE PROCEDURES.MAQUINA SET MEMORIA_RAM = NOVA_RAM, HARDDISK = NOVO_HD
    WHERE ID_MAQUINA = ID_MAQ;
END;
$$ LANGUAGE plpgsql;

CALL PROCEDURES.ATUALIZAR_RECURSOS_MAQUINA(1, 8, 1000);
SELECT * FROM PROCEDURES.MAQUINA WHERE ID_MAQUINA = 1;

/*5.Crie uma procedure chamada Transferir_Software que transfere 
um software de uma máquina para outra. Antes de transferir, 
a procedure deve verificar se a máquina de destino tem espaço 
suficiente para o software.*/
CREATE PROCEDURE PROCEDURES.TRANSFERIR_SOFTWARE(ID_SOFT INT, ID_MAQ_ORIGEM INT,
 ID_MAQ_DESTINO INT) AS $$
 DECLARE
    POSSIVEL BOOLEAN;
BEGIN
    -- VERIFICA SE A MÁQUINA DE DESTINO TEM ESPAÇO SUFICIENTE
    SELECT PROCEDURES.ESPACO_DISPONIVEL(ID_MAQ_DESTINO, ID_SOFT) INTO POSSIVEL;

    IF POSSIVEL THEN
        UPDATE PROCEDURES.SOFTWARE SET FK_MAQUINA = ID_MAQ_DESTINO
        WHERE ID_SOFTWARE = ID_SOFT AND FK_MAQUINA = ID_MAQ_ORIGEM;

        IF NOT FOUND THEN 
            RAISE EXCEPTION 'Software não encontrado na máquina de origem.';
        END IF;
    ELSE
        RAISE EXCEPTION 'Espaço insuficiente na máquina de destino.';
    END IF;
END;
$$ LANGUAGE plpgsql;

DROP PROCEDURE PROCEDURES.TRANSFERIR_SOFTWARE;

CALL PROCEDURES.TRANSFERIR_SOFTWARE(1, 1, 4);

/*6.Crie uma função Media_Recursos que retorna a média de Memória RAM 
e HardDisk de todas as máquinas cadastradas.*/
CREATE OR REPLACE FUNCTION PROCEDURES.MEDIA_RECURSOS() RETURNS INT AS $$
DECLARE
    MEDIA_RAM INT;
    MEDIA_HD INT;
BEGIN
    SELECT AVG(MEMORIA_RAM) INTO MEDIA_RAM
    FROM PROCEDURES.MAQUINA;
    SELECT AVG(HARDDISK) INTO MEDIA_HD
    FROM PROCEDURES.MAQUINA;
    RETURN (MEDIA_RAM + MEDIA_HD) / 2;
END;
$$ LANGUAGE plpgsql;

SELECT PROCEDURES.MEDIA_RECURSOS();

/*7.Crie uma procedure chamada Diagnostico_Maquina que faz uma avaliação
completa de uma máquina e sugere um upgrade se os recursos dela não 
forem suficientes para rodar os softwares instalados.*/

